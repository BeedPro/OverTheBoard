@{
    ViewData["Title"] = "Temp";
}

<div id="myBoard" style="width: 400px"></div>


@section scripts {
    <script src="https://unpkg.com/@@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js" integrity="sha384-8Vi8VHwn3vjQ9eUHUxex3JSN/NFqUg3QbPyX8kWyb93+8AC/pPWTzj+nHtbC5bxD" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js" integrity="sha384-s3XgLpvmHyscVpijnseAmye819Ee3yaGa8NxstkJVyA6nuDFjt59u1QvuEl/mecz" crossorigin="anonymous"></script>
    <script>

        var board = null
        var $board = $('#myBoard')
        var game = new Chess()
        var squareToHighlight = null
        var squareClass = 'square-55d63'

        function removeHighlights() {
            $board.find('.' + squareClass)
                .removeClass('highlight-white')
            $board.find('.' + squareClass)
                .removeClass('highlight-black')
        }

        function addHighlights(source, target) {
            removeHighlights()
            console.log($board)
            if ($board.find('.square-' + source).attr('class').includes('black')) {
                $board.find('.square-' + source).addClass('highlight-black')
            }
            else {
                $board.find('.square-' + source).addClass('highlight-white')
            }
            if (target != null) {
                if ($board.find('.square-' + target).attr('class').includes('black')) {
                    $board.find('.square-' + target).addClass('highlight-black')
                }
                else {
                    $board.find('.square-' + target).addClass('highlight-white')
                }
            }
        }

        //---------------------------------------------
        //function onMouseoverSquare(square, piece) {
        //    // get list of possible moves for this square
        //    var moves = game.moves({
        //        square: square,
        //        verbose: true
        //    })
        //    console.log(square)
        //}
        //----------------------------------------------

        function addHighlightMoves(square) {
            var $square = $('#myBoard .square-' + square)

            var dot = 'inset 0 0 5px 5px #7caff7'
            if ($square.hasClass('black-3c85d')) {
                dot = 'inset 0 0 5px 5px #6299e6'
            }

            $square.css('box-shadow', dot)
        }

        function removeHighlightMoves() {
            $('#myBoard .square-55d63').css('box-shadow', '')
        }

        function onDragStart(source, piece, position, orientation) {
            // do not pick up pieces if the game is over
            if (game.game_over()) return false
            addHighlights(source, null)
            removeHighlightMoves()
            var moves = game.moves({
                square: source,
                verbose: true
            })
            if (moves.length === 0) return

            // highlight the possible squares for this piece

            for (var i = 0; i < moves.length; i++) {
                addHighlightMoves(moves[i].to)
            }
        }

        function onDrop(source, target) {
            // see if the move is legal
            var move = game.move({
                from: source,
                to: target,
                promotion: 'q' // NOTE: always promote to a queen for example simplicity
            })

            // illegal move
            if (move === null) return 'snapback'

            // highlight white's move
            addHighlights(source, target)
            removeHighlightMoves()
        }

        function onMoveEnd() {
            $board.find('.square-' + squareToHighlight)
                .addClass('highlight')
        }

        // update the board position after the piece snap
        // for castling, en passant, pawn promotion
        function onSnapEnd() {
            board.position(game.fen())
        }

        var config = {
            draggable: true,
            pieceTheme: '/img/chesspieces/merida/{piece}.svg', //merida
            position: 'start',
            onDragStart: onDragStart,
            onDrop: onDrop,
            onMoveEnd: onMoveEnd,
            onSnapEnd: onSnapEnd
        }
        var board = Chessboard('myBoard', config)
    </script>
}

@section styles{
    <style type="text/css">
        .highlight-white {
            box-shadow: inset 0 0 50px 50px #7caff7;
        }

        .highlight-black {
            box-shadow: inset 0 0 50px 50px #6299e6;
        }
    </style>
    <!-- Chessboard.js-->
    <link rel="stylesheet" href="~/lib/chessboard/css/chessboard-1.0.0.css">
}
